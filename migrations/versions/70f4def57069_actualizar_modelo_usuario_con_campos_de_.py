from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '70f4def57069'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        op.create_table('Entidad_Responsable',
        sa.Column('entidad_id', sa.String(length=20), nullable=False),
        sa.Column('nombre', sa.String(length=100), nullable=False),
        sa.Column('tipo_entidad', sa.Enum('LIDER', 'CORRESPONSABLE', name='tipoentidad'), nullable=False),
        sa.PrimaryKeyConstraint('entidad_id')
        )
    except Exception as e:
        print(f"Advertencia: No se pudo crear 'Entidad_Responsable', podría ya existir. Error: {e}")

    try:
        op.create_table('Indicador',
        sa.Column('indicador_id', sa.String(length=20), nullable=False),
        sa.Column('nombre', sa.String(length=100), nullable=False),
        sa.Column('formula', sa.Text(), nullable=False),
        sa.Column('descripcion', sa.Text(), nullable=True),
        sa.Column('unidad_medida', sa.String(length=20), nullable=True),
        sa.Column('frecuencia_calculo', sa.Enum('DIARIO', 'SEMANAL', 'MENSUAL', 'TRIMESTRAL', 'SEMESTRAL', 'ANUAL', 'PERSONALIZADO', name='frecuenciacalculo'), nullable=True),
        sa.Column('es_critico', sa.Boolean(), nullable=True),
        sa.Column('fecha_creacion', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.PrimaryKeyConstraint('indicador_id')
        )
    except Exception as e:
        print(f"Advertencia: No se pudo crear 'Indicador', podría ya existir. Error: {e}")

    try:
        op.create_table('Meta',
        sa.Column('meta_id', sa.String(length=20), nullable=False),
        sa.Column('nombre', sa.String(length=100), nullable=False),
        sa.Column('meta_resultado', sa.Text(), nullable=True),
        sa.Column('descripcion_resultado', sa.Text(), nullable=True),
        sa.Column('unidad_medida', sa.String(length=50), nullable=True),
        sa.Column('estado', sa.Enum('PLANIFICADA', 'EN_EJECUCION', 'CUMPLIDA', 'CANCELADA', name='estadometaenum'), nullable=False),
        sa.Column('fecha_inicio', sa.Date(), nullable=True),
        sa.Column('fecha_fin', sa.Date(), nullable=True),
        sa.Column('fecha_registro', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
        sa.PrimaryKeyConstraint('meta_id')
        )
    except Exception as e:
        print(f"Advertencia: No se pudo crear 'Meta', podría ya existir. Error: {e}")

    try:
        op.create_table('Permiso',
        sa.Column('permiso_id', sa.String(length=20), nullable=False),
        sa.Column('nombre', sa.String(length=100), nullable=False),
        sa.Column('nivel_acceso', sa.Enum('LECTURA', 'ESCRITURA', 'TOTAL', name='nivelacceso'), nullable=False),
        sa.Column('descripcion', sa.Text(), nullable=True),
        sa.Column('fecha_creacion', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.PrimaryKeyConstraint('permiso_id'),
        sa.UniqueConstraint('nombre')
        )
    except Exception as e:
        print(f"Advertencia: No se pudo crear 'Permiso', podría ya existir. Error: {e}")

    try:
        op.create_table('Rol',
        sa.Column('rol_id', sa.String(length=20), nullable=False),
        sa.Column('nombre', sa.String(length=50), nullable=False),
        sa.Column('descripcion', sa.Text(), nullable=True),
        sa.Column('fecha_creacion', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('fecha_actualizacion', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.PrimaryKeyConstraint('rol_id')
        )
    except Exception as e:
        print(f"Advertencia: No se pudo crear 'Rol', podría ya existir. Error: {e}")

    try:
        op.create_table('Meta_Entidad',
        sa.Column('meta_id', sa.String(length=20), nullable=False),
        sa.Column('entidad_id', sa.String(length=20), nullable=False),
        sa.ForeignKeyConstraint(['entidad_id'], ['Entidad_Responsable.entidad_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['meta_id'], ['Meta.meta_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('meta_id', 'entidad_id')
        )
    except Exception as e:
        print(f"Advertencia: No se pudo crear 'Meta_Entidad', podría ya existir. Error: {e}")

    try:
        op.create_table('Rol_Permiso',
        sa.Column('rol_id', sa.String(length=20), nullable=False),
        sa.Column('permiso_id', sa.String(length=20), nullable=False),
        sa.Column('fecha_asignacion', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.ForeignKeyConstraint(['permiso_id'], ['Permiso.permiso_id'], onupdate='CASCADE', ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['rol_id'], ['Rol.rol_id'], onupdate='CASCADE', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('rol_id', 'permiso_id')
        )
    except Exception as e:
        print(f"Advertencia: No se pudo crear 'Rol_Permiso', podría ya existir. Error: {e}")

    try:
        op.create_table('Usuario',
        sa.Column('usuario_id', sa.String(length=20), nullable=False),
        sa.Column('rol_id', sa.String(length=20), nullable=False),
        sa.Column('nombre', sa.String(length=100), nullable=False),
        sa.Column('email', sa.String(length=100), nullable=False),
        sa.Column('password_hash', sa.String(length=255), nullable=False),
        sa.Column('fecha_creacion', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('ultimo_login', sa.DateTime(), nullable=True),
        sa.Column('activo', sa.Boolean(), nullable=True),
        sa.Column('intentos_fallidos', mysql.TINYINT(unsigned=True), nullable=True),
        sa.Column('fecha_bloqueo', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['rol_id'], ['Rol.rol_id'], onupdate='CASCADE'),
        sa.PrimaryKeyConstraint('usuario_id'),
        sa.UniqueConstraint('email')
        )
    except Exception as e:
        print(f"Advertencia: No se pudo crear 'Usuario', podría ya existir. Error: {e}")

    try:
        op.create_table('Auditoria',
        sa.Column('auditoria_id', sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column('usuario_id', sa.String(length=20), nullable=True),
        sa.Column('accion', sa.String(length=50), nullable=False),
        sa.Column('entidad_afectada', sa.String(length=50), nullable=False),
        sa.Column('id_entidad', sa.String(length=50), nullable=True),
        sa.Column('fecha_accion', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('detalles', sa.JSON(), nullable=True),
        sa.Column('ip_origen', sa.String(length=45), nullable=True),
        sa.Column('user_agent', sa.String(length=255), nullable=True),
        sa.Column('resultado', sa.Enum('EXITO', 'FALLO', 'ADVERTENCIA', name='resultadoaccion'), nullable=False),
        sa.ForeignKeyConstraint(['usuario_id'], ['Usuario.usuario_id'], ondelete='SET NULL'),
        sa.PrimaryKeyConstraint('auditoria_id')
        )
    except Exception as e:
        print(f"Advertencia: No se pudo crear 'Auditoria', podría ya existir. Error: {e}")

    try:
        op.create_table('Avance',
        sa.Column('avance_id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('titulo', sa.String(length=100), nullable=False),
        sa.Column('descripcion', sa.Text(), nullable=False),
        sa.Column('fecha_registro', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('porcentaje', sa.Numeric(precision=5, scale=2), nullable=True),
        sa.Column('aprobado', sa.Boolean(), nullable=True),
        sa.Column('usuario_id', sa.String(length=20), nullable=False),
        sa.Column('usuario_aprobador', sa.String(length=20), nullable=True),
        sa.Column('fecha_aprobacion', sa.DateTime(), nullable=True),
        sa.CheckConstraint('porcentaje >= 0 AND porcentaje <= 100', name='check_porcentaje_range'),
        sa.ForeignKeyConstraint(['usuario_aprobador'], ['Usuario.usuario_id'], ondelete='SET NULL'),
        sa.ForeignKeyConstraint(['usuario_id'], ['Usuario.usuario_id'], ondelete='RESTRICT'),
        sa.PrimaryKeyConstraint('avance_id')
        )
    except Exception as e:
        print(f"Advertencia: No se pudo crear 'Avance', podría ya existir. Error: {e}")

    try:
        op.create_table('Documento',
        sa.Column('documento_id', sa.String(length=20), nullable=False),
        sa.Column('usuario_id', sa.String(length=20), nullable=False),
        sa.Column('nombre', sa.String(length=255), nullable=False),
        sa.Column('tipo', sa.Enum('PDF', 'DOCX', 'XLSX', 'PPTX', 'JPG', 'PNG', 'TXT', 'OTRO', name='tipodocumento'), nullable=False),
        sa.Column('tamaño_mb', sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column('fecha_subida', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('ubicacion_almacenamiento', sa.String(length=512), nullable=True),
        sa.Column('hash_archivo', sa.String(length=64), nullable=True),
        sa.Column('eliminado', sa.Boolean(), nullable=True),
        sa.CheckConstraint('tamaño_mb > 0', name='check_tamaño_mb_positive'),
        sa.ForeignKeyConstraint(['usuario_id'], ['Usuario.usuario_id'], ondelete='RESTRICT'),
        sa.PrimaryKeyConstraint('documento_id')
        )
    except Exception as e:
        print(f"Advertencia: No se pudo crear 'Documento', podría ya existir. Error: {e}")

    try:
        op.create_table('Meta_Indicador',
        sa.Column('meta_id', sa.String(length=20), nullable=False),
        sa.Column('indicador_id', sa.String(length=20), nullable=False),
        sa.Column('valor_actual', sa.Numeric(precision=15, scale=2), nullable=True),
        sa.Column('meta', sa.Numeric(precision=15, scale=2), nullable=True),
        sa.Column('fecha_calculo', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('calculado_por', sa.String(length=20), nullable=True),
        sa.ForeignKeyConstraint(['calculado_por'], ['Usuario.usuario_id'], ondelete='SET NULL'),
        sa.ForeignKeyConstraint(['indicador_id'], ['Indicador.indicador_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['meta_id'], ['Meta.meta_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('meta_id', 'indicador_id')
        )
    except Exception as e:
        print(f"Advertencia: No se pudo crear 'Meta_Indicador', podría ya existir. Error: {e}")

    try:
        op.create_table('Notificacion',
        sa.Column('notificacion_id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('usuario_id', sa.String(length=20), nullable=False),
        sa.Column('tipo', sa.Enum('SISTEMA', 'DOCUMENTO', 'USUARIO', 'TAREA', 'REPORTE', 'ALERTA', 'INFORMATIVA', 'RECORDATORIO', 'APROBACION', name='tiponotificacion'), nullable=False),
        sa.Column('titulo', sa.String(length=100), nullable=False),
        sa.Column('mensaje', sa.Text(), nullable=False),
        sa.Column('fecha_envio', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
        sa.Column('fecha_lectura', sa.DateTime(), nullable=True),
        sa.Column('leida', sa.Boolean(), nullable=False),
        sa.Column('url_accion', sa.String(length=512), nullable=True),
        sa.Column('prioridad', sa.Enum('BAJA', 'MEDIA', 'ALTA', 'URGENTE', 'CRITICA', name='prioridadnotificacion'), nullable=False),
        sa.ForeignKeyConstraint(['usuario_id'], ['Usuario.usuario_id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('notificacion_id')
        )
    except Exception as e:
        print(f"Advertencia: No se pudo crear 'Notificacion', podría ya existir. Error: {e}")

    try:
        op.create_table('Reporte',
        sa.Column('reporte_id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('usuario_id', sa.String(length=20), nullable=False),
        sa.Column('tipo', sa.String(length=50), nullable=False),
        sa.Column('nombre', sa.String(length=100), nullable=False),
        sa.Column('fecha_generacion', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
        sa.Column('fecha_inicio', sa.Date(), nullable=True),
        sa.Column('fecha_fin', sa.Date(), nullable=True),
        sa.Column('parametros', mysql.JSON(), nullable=True),
        sa.Column('ubicacion_almacenamiento', sa.String(length=512), nullable=True),
        sa.Column('estado', sa.Enum('PENDIENTE', 'PROCESANDO', 'COMPLETADO', 'FALLIDO', name='estadoreporte'), nullable=False),
        sa.ForeignKeyConstraint(['usuario_id'], ['Usuario.usuario_id'], ondelete='RESTRICT'),
        sa.PrimaryKeyConstraint('reporte_id')
        )
    except Exception as e:
        print(f"Advertencia: No se pudo crear 'Reporte', podría ya existir. Error: {e}")

    try:
        op.create_table('Version_Documento',
        sa.Column('version_id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('documento_id', sa.String(length=20), nullable=False),
        sa.Column('numero_version', sa.Integer(), nullable=False),
        sa.Column('usuario_id', sa.String(length=20), nullable=False),
        sa.Column('fecha_modificacion', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.Column('cambios', sa.Text(), nullable=True),
        sa.Column('hash_version', sa.String(length=64), nullable=True),
        sa.ForeignKeyConstraint(['documento_id'], ['Documento.documento_id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['usuario_id'], ['Usuario.usuario_id'], ondelete='RESTRICT'),
        sa.PrimaryKeyConstraint('version_id'),
        sa.UniqueConstraint('documento_id', 'numero_version', name='uk_documento_version')
        )
    except Exception as e:
        print(f"Advertencia: No se pudo crear 'Version_Documento', podría ya existir. Error: {e}")

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('historial_actividads',
    sa.Column('id', mysql.BIGINT(display_width=20, unsigned=True), autoincrement=True, nullable=False),
    sa.Column('user_id', mysql.BIGINT(display_width=20, unsigned=True), autoincrement=False, nullable=True),
    sa.Column('actividad', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('tipo', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('datos_previos', mysql.LONGTEXT(charset='utf8mb4', collation='utf8mb4_bin'), nullable=True),
    sa.Column('datos_nuevos', mysql.LONGTEXT(charset='utf8mb4', collation='utf8mb4_bin'), nullable=True),
    sa.Column('ip_address', mysql.VARCHAR(length=255), nullable=True),
    sa.Column('user_agent', mysql.TEXT(), nullable=True),
    sa.Column('fecha_actividad', mysql.TIMESTAMP(), server_default=sa.text('current_timestamp() ON UPDATE current_timestamp()'), nullable=False),
    sa.Column('created_at', mysql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', mysql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('historial_actividads_user_id_foreign'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('failed_jobs',
    sa.Column('id', mysql.BIGINT(display_width=20, unsigned=True), autoincrement=True, nullable=False),
    sa.Column('created_at', mysql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', mysql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('version_documentos',
    sa.Column('id', mysql.BIGINT(display_width=20, unsigned=True), autoincrement=True, nullable=False),
    sa.Column('created_at', mysql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', mysql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('personal_access_tokens',
    sa.Column('id', mysql.BIGINT(display_width=20, unsigned=True), autoincrement=True, nullable=False),
    sa.Column('created_at', mysql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', mysql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('documentos',
    sa.Column('id', mysql.BIGINT(display_width=20, unsigned=True), autoincrement=True, nullable=False),
    sa.Column('created_at', mysql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', mysql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('password_reset_tokens',
    sa.Column('id', mysql.BIGINT(display_width=20, unsigned=True), autoincrement=True, nullable=False),
    sa.Column('created_at', mysql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', mysql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('migrations',
    sa.Column('id', mysql.INTEGER(display_width=10, unsigned=True), autoincrement=True, nullable=False),
    sa.Column('migration', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('batch', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('users',
    sa.Column('id', mysql.BIGINT(display_width=20, unsigned=True), autoincrement=True, nullable=False),
    sa.Column('created_at', mysql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', mysql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('sessions',
    sa.Column('id', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('user_id', mysql.BIGINT(display_width=20, unsigned=True), autoincrement=False, nullable=True),
    sa.Column('ip_address', mysql.VARCHAR(length=45), nullable=True),
    sa.Column('user_agent', mysql.TEXT(), nullable=True),
    sa.Column('payload', mysql.LONGTEXT(), nullable=False),
    sa.Column('last_activity', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    with op.batch_alter_table('sessions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('sessions_user_id_index'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('sessions_last_activity_index'), ['last_activity'], unique=False)

    op.drop_table('Version_Documento')
    op.drop_table('Reporte')
    op.drop_table('Notificacion')
    op.drop_table('Meta_Indicador')
    op.drop_table('Documento')
    op.drop_table('Avance')
    op.drop_table('Auditoria')
    op.drop_table('Usuario')
    op.drop_table('Rol_Permiso')
    op.drop_table('Meta_Entidad')
    op.drop_table('Rol')
    op.drop_table('Permiso')
    op.drop_table('Meta')
    op.drop_table('Indicador')
    op.drop_table('Entidad_Responsable')
    # ### end Alembic commands ###